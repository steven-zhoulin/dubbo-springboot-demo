<?xml version="1.0" encoding="UTF-8"?>
<Csf>
	<Common>
		<ProcInfo>
			<!-- 1、中心集成定义(当前有哪些中心的代码是部署在一起的,部署多个center; 2、对于前后端分离/融合中心，前端的该文件都配置为force@remote sec;soa;order;upc;resource;cust;rule-->
			<centers>
				<center>order</center>
			</centers>
			<!--租户编码-->
			<tenant>V0</tenant>

		</ProcInfo>

		
		<NameServer:zk>
			<!-- 多个地址用逗号(,)隔开10.1.130.138:21888 -->
			<Item name="server.list" value="127.0.0.1:2181"/>
			<!-- 连接超时时间，默认4000ms -->
			<Item name="connection.timeout" value="4000" />
			<!-- Session超时时间，默认40000ms -->
			<Item name="session.timeout" value="40000" />
			<!-- 连接断开重试次数，默认5次 -->
			<Item name="retry.times" value="5" />
			<!-- 重试时间间隔，默认1000ms -->
			<Item name="retry.sleep.ms" value="1000" />
		</NameServer:zk>
		<Monitor>
			<!-- 是否开启监控，默认不开启；开启后，会有一套监控的默认配置（端口等等）；如果要覆盖默认配置，使用csf.http.server.xml覆盖 -->
			<Item name="turn.on.monitor" value="false" />

			<!-- 吐数据流的间隔 -->
			<Item name="data.stream.internal" value="5000" />
		</Monitor>
	</Common>


	<Server>
		<!-- socket协议模块，职责：启动socket服务 -->
		<!--<Protocol:socket>
			&lt;!&ndash; 服务端关闭空闲连接时间，默认70s &ndash;&gt;
			<Item name="channel.idle.time.out" value="70000" />

			&lt;!&ndash; Accept线程池的大小默认为1 &ndash;&gt;
			<Item name="accept.thread.num" value="1" />

			&lt;!&ndash; IO线程池的大小，默认为Runtime.getRuntime().availableProcessors()*2 &ndash;&gt;
			<Item name="io.thread.num" value="8" />

			&lt;!&ndash; Socket参数SO_SNDBUF，默认65535 &ndash;&gt;
			<Item name="io.so_sndbuf" value="65535" />

			&lt;!&ndash; Socket参数SO_RCVBUF，默认65535 &ndash;&gt;
			<Item name="io.so_rcvbuf" value="65535" />
		</Protocol:socket>-->

		<Protocol:restful></Protocol:restful>
		<Warm>
			<!-- 1、预热拦截器，做预热前、预热后、预热失败的处理 以分号;分割 2、实现接口com.ai.aif.csf.api.common.warmup.IWarmupInterceptor -->
			<Item name="warm.interceptor" value="com.ai.aif.csf.executor.warm.interceptor.RegisterInterceptor" />

			<!-- 1、预热实现类,以分号;分割 2、com.ai.aif.csf.api.common.warmup.IWarmUpper -->
			<Item name="warm.upper" value="" />
		</Warm>

		<!-- 安全停机模块,职责：安全停机 -->
		<SafeShutdown>
			<!-- 安全停机超时时间配置 -->
			<timeout>5000</timeout>
			<!--1、停机时需要完成的任务继承该接口(自定义任务)
				2、实现接口com.ai.aif.csf.api.common.safe.shutdown.ISafeShutdown-->
			<custom></custom>
		</SafeShutdown>

        <ThreadPool selectImpl="com.ai.aif.csf.thread.pool.selector.ServiceCodeThreadPoolKeySelector">
            <Pools>
                <Pool name="0" >
                    <Property name="corePoolSize" value="1" />
                    <Property name="maximumPoolSize" value="1" />
                    <Property name="queueSize" value="0" />
                    <Property name="metrics.enabled" value="false" />
                    <Property name="metrics.window.seconds" value="2" />
                </Pool>
                <!-- <Pool name="1" expression="res_IUserInfoCSV_circleBreak">
                    <Property name="corePoolSize" value="1" />
                    <Property name="maximumPoolSize" value="1" />
                    <Property name="queueSize" value="1" />
                    <Property name="metrics.enabled" value="false" />
                    <Property name="metrics.window.seconds" value="2" />
                </Pool> -->
            </Pools>
        </ThreadPool>

		<!-- 服务全局控制模块，职责：超时控制，异常包装控制，线程创建策略控制 -->
		<Control>
			<Item name="default.timeout" value="20000" />
			<Item name="committing.wait.timeout" value="8000" />

			<!--1、异常的完全限定名，多个可以传输的异常以分号;分割
				2、默认情况异常不传递,配置为空
				在广西此处应该配置为com.ai.common.i18n.BusinessException
				3、服务端在调用业务方法，抛出这些异常的时候，不做包装处理，异常序列化传输到客户端
				4、客户端在获取到这些异常的时候，将异常传递给客户端异常处理接口（csf.client.exception.handler中配置的类）-->
			<Item name="csf.no.wrapper.exceptions">
<!-- 				<value>com.asiainfo.common.exception.core.spi.BusiException</value>
 -->			</Item>
			<Item name="first.local.invoke.need.new.thread" value="false" />
			<Item name="meta.xml.fetch.mode" value="db" />
		</Control>

		<!-- 过滤器模块，职责：参数映射过滤器，业务自定义过滤器绑定到过滤器链中 -->
		<Filter>
			<!--#入参、出参为固定类型、单个的时候使用该过滤器com.ai.aif.csf.executor.request.filter.params.mapping.SingleMapParamMappingFilter
                        #支持pojo转化的过滤器:com.ai.aif.csf.executor.request.filter.params.mapping.ParamsMappingFilter
                        com.ai.aif.csf.executor.request.filter.params.mapping.JSONMappingFilter
                        #透传的参数过滤器:com.ai.aif.csf.executor.request.filter.params.mapping.TransportParamsMappingFilter
                        #服务描述文件过滤器:com.ai.aif.csf.executor.request.filter.params.mapping.MetaParamsMappingFilter-->
			<ParamMapping>
				<impl>com.ai.aif.csf.executor.request.filter.params.mapping.JSONMappingFilter</impl>
			</ParamMapping>
			<!-- <Custom:local/> -->
			<Custom:remote>
				<impl></impl>
			</Custom:remote>
		</Filter>

		<!--默认采用com.ai.aif.csf.common.exception.handler.DefaultServerExceptionHandler-->
		<Item name="server.exception.handler">
			<value></value>
		</Item>

		<!--Discover:csf>
			<Item name="root" value="com" />
			<Item name="patten" value="**/*CSVImpl.class" />
				<Item name="service.data.fetch.mode" value="spring" />
		</Discover:csf-->
		<Discover:config>
			<Item name="path" value="csf.services.xml" />
		</Discover:config>
		<Fetcher:springboot></Fetcher:springboot>

		<Exporter:zookeeper/>
		<Registry:zk>
			<!--
			<Item name="app.common.args" value="java.naming.factory.initial=com.bes.jndi.CtxFactory" />
			-->
		</Registry:zk>
	</Server>

	<Client>
		<Extention>
			<!-- 客户端获取服务信息的方式 从服务路由器获取配置为 		   com.ai.aif.csf.client.service.info.fetcher.FetchServiceInfoFromServiceRouter
			从jvm缓存中获取（通常在开发的时候使用，这样服务路由器可以对开发透明）com.ai.aif.csf.module.fetcher.appframe.cache.FetchServiceInfoFromDBCache
			直连方式配置com.ai.aif.csf.client.service.info.fetcher.FetchDirectServiceInfo -->
			<Item name="serviceinfo.fetcher">
				<value>com.ai.aif.csf.client.service.info.fetcher.FetchServiceInfoFromServiceRouter</value>
			</Item>

			<!-- 1、该配置开放对业务异常的处理，可以对异常进行收缩（广西）或其他处理; 2、框架默认实现，直接将此类异常抛出，不做处理 3、广西异常收缩实现类com.ai.aif.csf.platform.exception.filter.ExceptionShrinkFilter -->
			<Item name="exception.handler">
				<value>com.ai.aif.csf.client.service.exception.handler.DefaultClientExceptionHandler</value>
			</Item>

			
		</Extention>
		<Control>
			<!-- 客户端集群策略（重试策略）：重试N次,括号中为0或负数不重试 -->
			<Item name="execute.policy" value="Failfast" />

			<!-- 客户端默认连接创建时间，毫秒为单位；必须配置，不配置报错 -->
			<Item name="default.connection.timeout" value="1000" />

			<!-- 客户端默认socket不活动最大时间，毫秒为单位；必须配置，不配置报错 -->
			<Item name="default.socket.timeout" value="93000" />

			<!-- 客户端负载均衡策略
            <Item name="host.lbs" value="round" />-->

			<!-- 客户端是否需要注册 -->
			<Item name="registry.enable" value="false" />

			<!-- 是否全局将服务协议替换成socket -->
			<Item name="replace.remote.with.socket" value="false" />
		</Control>

		<CircuitBreaker>
			<!-- 熔断器开关 -->
			<Item name="enable" value="false" />
			<!-- 主机熔断时间窗口内请求失败率 -->
			<Item name="host.error.threshold.percentage" value="80" />
			<!-- 服务熔断时间窗口请求失败率 -->
			<Item name="service.error.threshold.percentage" value="80" />
			<!-- 熔断器统计时间窗口 -->
			<Item name="statistics.window" value="10000" />
			<!-- 时间窗口内触发熔断请求次数开关 -->
			<Item name="request.volume.threshold" value="30" />
			<!-- 是否开启线程池隔离模式 -->
			<Item name="thread.isolation.enable" value="true" />
		</CircuitBreaker>

		<!-- 安全停机，职责：客户端安全停机 -->
		<SafeShutdown>
			<!-- 安全停机超时时间配置 -->
			<timeout></timeout>
			<!-- 安全停机实现执行类 -->
			<custom></custom>
		</SafeShutdown>

		<!-- 预热模块，职责：帮助业务实现预热 -->
		<Warm>
			<!-- 1、预热拦截器，做预热前、预热后、预热失败的处理 以分号;分割 2、实现接口com.ai.aif.csf.api.common.warmup.IWarmupInterceptor -->
			<Item name="warm.interceptor" value="" />
			<!-- 1、预热实现类,以分号;分割 2、com.ai.aif.csf.api.common.warmup.IWarmUpper -->
			<Item name="warm.upper" value="" />
		</Warm>
	</Client>
</Csf>
